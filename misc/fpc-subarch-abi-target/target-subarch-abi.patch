Index: utils/fpcm/fpcmake.ini
===================================================================
--- utils/fpcm/fpcmake.ini	(revision 39510)
+++ utils/fpcm/fpcmake.ini	(working copy)
@@ -252,6 +252,9 @@
 FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
 FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
 
+# CC
+SUBARCH_ABI_SUFFIX=
+
 ifeq ($(CPU_TARGET),armeb)
 ARCH=arm
 override FPCOPT+=-Cb
@@ -259,6 +262,10 @@
 ifeq ($(CPU_TARGET),armel)
 ARCH=arm
 override FPCOPT+=-CaEABI
+
+# CC
+override ABI:=eabi
+
 else
 ARCH=$(CPU_TARGET)
 endif
@@ -270,8 +277,16 @@
 $(error When compiling for arm-embedded, a sub-architecture (e.g. SUBARCH=armv4t or SUBARCH=armv7m) must be defined)
 endif
 override FPCOPT+=-Cp$(SUBARCH)
+
+# CC
+ifeq ($(ABI),)
+SUBARCH_ABI_SUFFIX=-$(SUBARCH)
+else
+SUBARCH_ABI_SUFFIX=-$(SUBARCH)-$(ABI)
 endif
 
+endif
+
 ifeq ($(FULL_TARGET),avr-embedded)
 ifeq ($(SUBARCH),)
 # we don't add a default here, people should explicitly add the SUBARCH
@@ -278,6 +293,10 @@
 $(error When compiling for avr-embedded, a sub-architecture (e.g. SUBARCH=avr25 or SUBARCH=avr35) must be defined)
 endif
 override FPCOPT+=-Cp$(SUBARCH)
+
+# CC
+SUBARCH_ABI_SUFFIX=-$(SUBARCH)
+
 endif
 
 ifeq ($(FULL_TARGET),mipsel-embedded)
@@ -286,6 +305,10 @@
 $(error When compiling for mipsel-embedded, a sub-architecture (e.g. SUBARCH=pic32mx) must be defined)
 endif
 override FPCOPT+=-Cp$(SUBARCH)
+
+# CC
+SUBARCH_ABI_SUFFIX=-$(SUBARCH)
+
 endif
 
 # Full name of the target, including CPU and OS. For OSs limited
@@ -297,7 +320,10 @@
 ifneq ($(findstring $(OS_TARGET),$(LIMIT83fs)),)
 TARGETSUFFIX=$(OS_TARGET)
 else
-TARGETSUFFIX=$(FULL_TARGET)
+
+# CC
+TARGETSUFFIX=$(FULL_TARGET)$(SUBARCH_ABI_SUFFIX)
+
 endif
 SOURCESUFFIX=$(FULL_SOURCE)
 endif
@@ -307,6 +333,8 @@
 CROSSCOMPILE=1
 endif
 
+
+
 # Check if the Makefile supports this target, but not
 # when the make target is to rebuild the makefile
 ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
@@ -1166,9 +1194,10 @@
 ZIPEXAMPLESUFFIX=.examples
 ifdef CROSSCOMPILE
 ZIPSUFFIX=.$(SOURCESUFFIX)
-ZIPCROSSPREFIX=$(TARGETSUFFIX)-
+ZIPCROSSPREFIX=$(TARGETSUFFIX)
 else
-ZIPSUFFIX=.$(TARGETSUFFIX)
+ZIPSUFFIX=.$(TARGETSUFFIX)$(FILESUFFIX)
+
 ZIPCROSSPREFIX=
 endif
 endif
@@ -1889,7 +1918,7 @@
 endif
 
 ifndef FULLZIPNAME
-FULLZIPNAME=$(ZIPCROSSPREFIX)$(ZIPPREFIX)$(ZIPNAME)$(ZIPSUFFIX)
+FULLZIPNAME=$(ZIPCROSSPREFIX)$(ZIPPREFIX)-$(ZIPNAME)$(ZIPSUFFIX)
 endif
 
 # ZipTarget
Index: packages/fpmkunit/src/fpmkunit.pp
===================================================================
--- packages/fpmkunit/src/fpmkunit.pp	(revision 39510)
+++ packages/fpmkunit/src/fpmkunit.pp	(working copy)
@@ -970,6 +970,11 @@
     FOptions: TStrings;
     FCPU: TCPU;
     FOS: TOS;
+
+    // CC
+    FSubArch: string;
+    FABI: string;
+
     FMode : TCompilerMode;
     FCompilerVersion : String;
     FPrefix: String;
@@ -1018,6 +1023,11 @@
     procedure SetCPU(const AValue: TCPU);
     procedure SetOptions(const AValue: TStrings);
     procedure SetOS(const AValue: TOS);
+
+    // CC
+    Property SubArch: string read FSubArch write FSubArch;
+    Property ABI: string read FABI write FABI;
+
     procedure SetPrefix(const AValue: String);
     procedure SetSearchPath(AValue: TStrings);
     procedure SetTarget(const AValue: String);
@@ -1767,6 +1777,11 @@
   SHelpCmdOptions     = 'Where options is one or more of the following:';
   SHelpCPU            = 'Compile for indicated CPU.';
   SHelpOS             = 'Compile for indicated OS';
+
+  // CC
+  SHelpSubArch        = 'Compile for indicated subarchitecture (if supported by CPU).';
+  SHelpABI            = 'Compile for indicated ABI.';
+
   SHelpTarget         = 'Compile for indicated target';
   SHelpList           = 'list commands instead of actually executing them.';
   SHelpPrefix         = 'Use indicated prefix directory for all commands.';
@@ -2350,7 +2365,17 @@
   if ALimit83 then
     Result := OSToString(OS)
   else
+  begin
     Result:=CPUToString(CPU)+'-'+OSToString(OS);
+
+    // CC
+    if (CPU in [avr, arm]) and (Defaults.SubArch <> '') then
+    begin
+      result := result + '-' + Defaults.SubArch;
+      if (CPU = arm) and (Defaults.ABI <> '') then
+        result := result + '-' + Defaults.ABI;
+    end;
+  end;
 end;
 
 Function MakeTargetString(CPU : TCPU;OS: TOS) : String;
@@ -4617,6 +4642,11 @@
   FNoFPCCfg:=False;
   FCPU:=cpuNone;
   FOS:=osNone;
+
+  // CC
+  FSubArch := '';
+  FABI := '';
+
   FUnitInstallDir:='$(baseinstalldir)units/$(target)/$(packagename)';
   FUnitConfigFilesInstallDir:='fpmkinst/$(target)';
   FBuildMode:=bmOneByOne;
@@ -5208,6 +5238,13 @@
         Defaults.OS:=StringToOS(OptionArg(I));
         Defaults.ExplicitOSNone := OptionArg(I) = OSToString(osNone);
       end
+
+    // CC
+    else if Checkoption(I,'S','subarch') then
+      Defaults.SubArch := lowercase(OptionArg(I))
+    else if Checkoption(I,'ab','abi') then
+      Defaults.ABI := lowercase(OptionArg(I))
+
     else if Checkoption(I,'t','target') then
       Defaults.Target:=OptionArg(I)
     else if CheckOption(I,'lc','list-commands') then
@@ -5354,6 +5391,11 @@
   LogOption('io','ignoreinvalidoption',SHelpIgnoreInvOpt);
   LogArgOption('C','cpu',SHelpCPU);
   LogArgOption('O','os',SHelpOS);
+
+  // CC
+  LogArgOption('S','subarch',SHelpSubArch);
+  LogArgOption('ab','abi',SHelpABI);
+
   LogArgOption('t','target',SHelpTarget);
   LogArgOption('P','prefix',SHelpPrefix);
   LogArgOption('B','baseinstalldir',SHelpBaseInstalldir);
Index: packages/Makefile.fpc
===================================================================
--- packages/Makefile.fpc	(revision 39510)
+++ packages/Makefile.fpc	(working copy)
@@ -27,6 +27,15 @@
 ifdef CPU_TARGET
 FPC_TARGETOPT+=--cpu=$(CPU_TARGET)
 endif
+
+# CC
+ifdef SUBARCH
+FPC_TARGETOPT+=--subarch=$(SUBARCH)
+endif
+ifdef ABI
+FPC_TARGETOPT+=--abi=$(ABI)
+endif
+
 FPMAKE_BIN_CLEAN=$(wildcard ./fpmake$(SRCEXEEXT))
 LOCALFPMAKE=./fpmake$(SRCEXEEXT)
 # Get the location of the bootstrap-fpmkunit units
@@ -52,6 +61,13 @@
 # Do not pass the Makefile's unit and binary target locations. Fpmake uses it's own.
 override FPCOPT:=$(filter-out -FU%,$(FPCOPT))
 override FPCOPT:=$(filter-out -FE%,$(FPCOPT))
+
+# CC
+override FPCOPT:=$(filter-out -Cp%,$(FPCOPT))
+override FPCOPT:=$(filter-out -P%,$(FPCOPT))
+override FPCOPT:=$(filter-out -T%,$(FPCOPT))
+override FPCOPT:=$(filter-out -Ca%,$(FPCOPT))
+
 # Do not pass the package-unitdirectories. Fpmake adds those and this way they don't apear in the .fpm
 override FPCOPT:=$(filter-out $(addprefix -Fu,$(COMPILER_UNITDIR)),$(FPCOPT))# Compose general fpmake-parameters
 # Compose general fpmake-parameters
Index: packages/rtl-extra/Makefile.fpc
===================================================================
--- packages/rtl-extra/Makefile.fpc	(revision 39510)
+++ packages/rtl-extra/Makefile.fpc	(working copy)
@@ -23,6 +23,15 @@
 ifdef CPU_TARGET
 FPC_TARGETOPT+=--cpu=$(CPU_TARGET)
 endif
+
+# CC
+ifdef SUBARCH
+FPC_TARGETOPT+=--subarch=$(SUBARCH)
+endif
+ifdef ABI
+FPC_TARGETOPT+=--abi=$(ABI)
+endif
+
 LOCALFPMAKE=./fpmake$(SRCEXEEXT)
 
 [rules]
@@ -29,6 +38,13 @@
 # Do not pass the Makefile's unit and binary target locations. Fpmake uses it's own.
 override FPCOPT:=$(filter-out -FU%,$(FPCOPT))
 override FPCOPT:=$(filter-out -FE%,$(FPCOPT))
+
+# CC
+override FPCOPT:=$(filter-out -Cp%,$(FPCOPT))
+override FPCOPT:=$(filter-out -P%,$(FPCOPT))
+override FPCOPT:=$(filter-out -T%,$(FPCOPT))
+override FPCOPT:=$(filter-out -Ca%,$(FPCOPT))
+
 # Do not pass the package-unitdirectories. Fpmake adds those and this way they don't apear in the .fpm
 override FPCOPT:=$(filter-out $(addprefix -Fu,$(COMPILER_UNITDIR)),$(FPCOPT))# Compose general fpmake-parameters
 # Compose general fpmake-parameters
